{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","oldData","JSON","parse","localStorage","getItem","oldGraphData","oldGraphTimeData","data","labels","datasets","label","borderColor","backgroundColor","useState","quran","list","currentSurah","setCurrentSurah","currentAayahNo","setCurrentAayahNo","verses","versesList","setVersesList","aayah","setAayah","totalAayahsRead","setTotalAayahs","totalAayaths","className","style","textAlign","id","parseFloat","toFixed","options","responsive","plugins","legend","position","title","display","text","onChange","event","e","target","selectedIndex","value","map","item","index","transliteration","slice","href","onClick","total","i","total_verses","currentAayah","percentage","push","d","Date","month","getMonth","formattedDateTime","getDate","getHours","getMinutes","setItem","stringify","saveData","ChartJS","registerables","rootElement","document","getElementById","createRoot","render","process","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e24a581c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  console.log(\"sss..\", process.env.NODE_ENV);\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { useState } from 'react';\r\nimport './styles.css';\r\nimport quran from './assets/quran.json';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, registerables } from 'chart.js';\r\nChartJS.register(...registerables);\r\n\r\nexport default function App() {\r\n  const oldData = JSON.parse(localStorage.getItem('oldData'));\r\n  const oldGraphData = localStorage.getItem('oldGraphData')\r\n    ? JSON.parse(localStorage.getItem('oldGraphData'))\r\n    : [];\r\n  const oldGraphTimeData = localStorage.getItem('oldGraphTimeData')\r\n    ? JSON.parse(localStorage.getItem('oldGraphTimeData'))\r\n    : [];\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Chart.js Line Chart',\r\n      },\r\n    },\r\n  };\r\n  const data = {\r\n    labels: oldGraphTimeData,\r\n    datasets: [\r\n      {\r\n        label: 'Dataset 1',\r\n        data: oldGraphData,\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const [list] = useState(quran);\r\n  const [currentSurah, setCurrentSurah] = useState(\r\n    oldData ? oldData.currentSurah : 0\r\n  );\r\n  const [currentAayahNo, setCurrentAayahNo] = useState(\r\n    oldData ? oldData.currentAayahNo : 0\r\n  );\r\n  const [versesList, setVersesList] = useState(\r\n    currentSurah ? list[currentSurah - 1].verses : []\r\n  );\r\n  const [aayah, setAayah] = useState('');\r\n  const [totalAayahsRead, setTotalAayahs] = useState(\r\n    oldData ? oldData.totalAayahsRead : 0\r\n  );\r\n  const totalAayaths = 6236;\r\n\r\n  const surahSelected = (e) => {\r\n    setCurrentSurah(e);\r\n    if (e !== 0) {\r\n      setVersesList(list[e - 1].verses);\r\n      setCurrentAayahNo(0);\r\n      setAayah('');\r\n    } else {\r\n      setCurrentSurah(0);\r\n      setVersesList([]);\r\n      setAayah('');\r\n    }\r\n  };\r\n\r\n  const aayahSelected = (e) => {\r\n    setCurrentAayahNo(e);\r\n    if (e !== 0) {\r\n      setAayah(versesList[e - 1].text);\r\n    } else {\r\n      setAayah('');\r\n    }\r\n  };\r\n\r\n  const saveData = () => {\r\n    let total = 0;\r\n    if (currentSurah != 0) {\r\n      for (let i = 0; i <= currentSurah - 2; i++) {\r\n        total = total + list[i].total_verses;\r\n      }\r\n      total = total + currentAayahNo;\r\n    } else {\r\n      total = currentAayahNo;\r\n    }\r\n    setTotalAayahs(total);\r\n    let data = {\r\n      totalAayahsRead: total,\r\n      currentSurah: currentSurah,\r\n      currentAayahNo: currentAayahNo,\r\n      currentAayah: aayah,\r\n      percentage: parseFloat((totalAayahsRead / totalAayaths) * 100).toFixed(2),\r\n    };\r\n\r\n    if (oldData) {\r\n      oldGraphData.push(total - oldData.totalAayahsRead);\r\n    } else {\r\n      oldGraphData.push(total);\r\n    }\r\n    let d = new Date();\r\n    let month = d.getMonth() + 1;\r\n    let formattedDateTime =\r\n      d.getDate() + '-' + month + ' | ' + d.getHours() + ':' + d.getMinutes();\r\n    oldGraphTimeData.push(formattedDateTime);\r\n    localStorage.setItem('oldGraphData', JSON.stringify(oldGraphData));\r\n    localStorage.setItem('oldGraphTimeData', JSON.stringify(oldGraphTimeData));\r\n    localStorage.setItem('oldData', JSON.stringify(data));\r\n\r\n    // window.location.reload(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Quran Tracker</h1>\r\n      </header>\r\n      <div style={{ textAlign: '-webkit-center' }}>\r\n        <h2>\r\n          {totalAayahsRead > 0\r\n            ? 'Salam! Your progress so far:'\r\n            : 'Salam! Select your last read Surah and aayah and save your progress!'}\r\n        </h2>\r\n        <table id=\"progress\">\r\n          <thead>\r\n            <tr>\r\n              <th>Category</th>\r\n              <th>Statistics</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Total Aayahs Read:</td>\r\n              <td>{totalAayahsRead}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Percentage of Quran Completed:</td>\r\n              <td>\r\n                {parseFloat((totalAayahsRead / totalAayaths) * 100).toFixed(2)}%\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>Quran Left:</td>\r\n              <td>\r\n                {totalAayaths - totalAayahsRead} Aayahs |{'  '}\r\n                {parseFloat(\r\n                  ((totalAayaths - totalAayahsRead) / totalAayaths) * 100\r\n                ).toFixed(2)}\r\n                %\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>Last Aayah</td>\r\n              <td>\r\n                {currentSurah} : {currentAayahNo}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <Line options={options} data={data} />\r\n        <h2>Surah List</h2>\r\n        <div className=\"box\">\r\n          <select\r\n            onChange={(event) =>\r\n              surahSelected(event.target.options.selectedIndex)\r\n            }\r\n          >\r\n            <option key=\"0\" value={null}>\r\n              -- Select Current Surah --\r\n            </option>\r\n            {list.map((item, index) => {\r\n              return (\r\n                <option key={item.id} value={item.verses}>\r\n                  {index + 1}. {item.transliteration}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n\r\n          <h2>Aayah List</h2>\r\n          <select\r\n            onChange={(event) =>\r\n              aayahSelected(event.target.options.selectedIndex)\r\n            }\r\n          >\r\n            <option key=\"0\" value={null}>\r\n              -- Select Last Read Aayah--\r\n            </option>\r\n            {versesList.map((item, index) => {\r\n              return (\r\n                <option key={index}>\r\n                  {item.text.slice(0, 25)}... {index + 1}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <h2>{aayah}</h2>\r\n        {aayah != '' ? (\r\n          <p>\r\n            <b>Note:</b> Aayahs mentioned here is just for reference, We\r\n            recommend you to read Quran from a physical book or from an\r\n            authenticated e-book and then save your progress here. Above shown\r\n            aayahs are fetched from\":{' '}\r\n            <strong>\r\n              <a href=\"https://github.com/risan/quran-json\" target=\"_blank\">\r\n                risan/quran-json\r\n              </a>\r\n            </strong>\r\n          </p>\r\n        ) : null}\r\n        <button className=\"button\" onClick={() => saveData()}>\r\n          Save\r\n        </button>\r\n      </div>\r\n      <footer>\r\n        <p>\r\n          If you have any feedback, bug report or want to contribute,{' '}\r\n          <a href=\"mailto:soubankhan3@gmail.com\" target=\"_blank\">\r\n            then send me an email\r\n          </a>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nroot.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n);\r\nserviceWorker.register();\r\n"],"sourceRoot":""}